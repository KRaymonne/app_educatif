import app from './app';
import { config } from './config';
import { connectDatabase } from './config/database';
import { handleUncaughtExceptions } from './middleware/errorHandler';

// G√©rer les exceptions non captur√©es
handleUncaughtExceptions();

/**
 * D√©marrer le serveur
 */
const startServer = async (): Promise<void> => {
  try {
    // Connexion √† la base de donn√©es
    await connectDatabase();
    
    // D√©marrer le serveur HTTP
    const server = app.listen(config.PORT, () => {
      console.log(`üöÄ Serveur d√©marr√© sur le port ${config.PORT}`);
      console.log(`üåç Environnement: ${config.NODE_ENV}`);
      console.log(`üìç URL: http://localhost:${config.PORT}`);
      console.log(`üè• Health check: http://localhost:${config.PORT}/health`);
      
      if (config.NODE_ENV === 'development') {
        console.log(`üìö API Documentation: http://localhost:${config.PORT}/api`);
      }
    });

    // Gestion de l'arr√™t propre du serveur
    const gracefulShutdown = (signal: string) => {
      console.log(`\nüõë Signal ${signal} re√ßu. Arr√™t en cours...`);
      
      server.close(async (error) => {
        if (error) {
          console.error('‚ùå Erreur lors de la fermeture du serveur:', error);
          process.exit(1);
        }
        
        console.log('üîí Serveur HTTP ferm√©');
        
        try {
          // Fermer la connexion √† la base de donn√©es
          const { disconnectDatabase } = await import('./config/database');
          await disconnectDatabase();
          console.log('‚úÖ Arr√™t propre termin√©');
          process.exit(0);
        } catch (dbError) {
          console.error('‚ùå Erreur lors de la fermeture de la base de donn√©es:', dbError);
          process.exit(1);
        }
      });

      // Forcer l'arr√™t apr√®s 10 secondes
      setTimeout(() => {
        console.error('‚è∞ Arr√™t forc√© apr√®s timeout');
        process.exit(1);
      }, 10000);
    };

    // √âcouter les signaux d'arr√™t
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Gestion des erreurs du serveur
    server.on('error', (error: NodeJS.ErrnoException) => {
      if (error.code === 'EADDRINUSE') {
        console.error(`‚ùå Le port ${config.PORT} est d√©j√† utilis√©`);
        process.exit(1);
      } else if (error.code === 'EACCES') {
        console.error(`‚ùå Permission refus√©e pour le port ${config.PORT}`);
        process.exit(1);
      } else {
        console.error('‚ùå Erreur du serveur:', error);
        process.exit(1);
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
};

// D√©marrer le serveur
startServer();
